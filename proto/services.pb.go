// Code generated by protoc-gen-go.
// source: services.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PseudonymSystemEC service

type PseudonymSystemECClient interface {
	GenerateCertificate_EC(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystemEC_GenerateCertificate_ECClient, error)
	GenerateNym_EC(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystemEC_GenerateNym_ECClient, error)
	ObtainCredential_EC(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystemEC_ObtainCredential_ECClient, error)
	TransferCredential_EC(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystemEC_TransferCredential_ECClient, error)
}

type pseudonymSystemECClient struct {
	cc *grpc.ClientConn
}

func NewPseudonymSystemECClient(cc *grpc.ClientConn) PseudonymSystemECClient {
	return &pseudonymSystemECClient{cc}
}

func (c *pseudonymSystemECClient) GenerateCertificate_EC(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystemEC_GenerateCertificate_ECClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PseudonymSystemEC_serviceDesc.Streams[0], c.cc, "/proto.PseudonymSystemEC/GenerateCertificate_EC", opts...)
	if err != nil {
		return nil, err
	}
	x := &pseudonymSystemECGenerateCertificate_ECClient{stream}
	return x, nil
}

type PseudonymSystemEC_GenerateCertificate_ECClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pseudonymSystemECGenerateCertificate_ECClient struct {
	grpc.ClientStream
}

func (x *pseudonymSystemECGenerateCertificate_ECClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pseudonymSystemECGenerateCertificate_ECClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pseudonymSystemECClient) GenerateNym_EC(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystemEC_GenerateNym_ECClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PseudonymSystemEC_serviceDesc.Streams[1], c.cc, "/proto.PseudonymSystemEC/GenerateNym_EC", opts...)
	if err != nil {
		return nil, err
	}
	x := &pseudonymSystemECGenerateNym_ECClient{stream}
	return x, nil
}

type PseudonymSystemEC_GenerateNym_ECClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pseudonymSystemECGenerateNym_ECClient struct {
	grpc.ClientStream
}

func (x *pseudonymSystemECGenerateNym_ECClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pseudonymSystemECGenerateNym_ECClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pseudonymSystemECClient) ObtainCredential_EC(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystemEC_ObtainCredential_ECClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PseudonymSystemEC_serviceDesc.Streams[2], c.cc, "/proto.PseudonymSystemEC/ObtainCredential_EC", opts...)
	if err != nil {
		return nil, err
	}
	x := &pseudonymSystemECObtainCredential_ECClient{stream}
	return x, nil
}

type PseudonymSystemEC_ObtainCredential_ECClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pseudonymSystemECObtainCredential_ECClient struct {
	grpc.ClientStream
}

func (x *pseudonymSystemECObtainCredential_ECClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pseudonymSystemECObtainCredential_ECClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pseudonymSystemECClient) TransferCredential_EC(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystemEC_TransferCredential_ECClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PseudonymSystemEC_serviceDesc.Streams[3], c.cc, "/proto.PseudonymSystemEC/TransferCredential_EC", opts...)
	if err != nil {
		return nil, err
	}
	x := &pseudonymSystemECTransferCredential_ECClient{stream}
	return x, nil
}

type PseudonymSystemEC_TransferCredential_ECClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pseudonymSystemECTransferCredential_ECClient struct {
	grpc.ClientStream
}

func (x *pseudonymSystemECTransferCredential_ECClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pseudonymSystemECTransferCredential_ECClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PseudonymSystemEC service

type PseudonymSystemECServer interface {
	GenerateCertificate_EC(PseudonymSystemEC_GenerateCertificate_ECServer) error
	GenerateNym_EC(PseudonymSystemEC_GenerateNym_ECServer) error
	ObtainCredential_EC(PseudonymSystemEC_ObtainCredential_ECServer) error
	TransferCredential_EC(PseudonymSystemEC_TransferCredential_ECServer) error
}

func RegisterPseudonymSystemECServer(s *grpc.Server, srv PseudonymSystemECServer) {
	s.RegisterService(&_PseudonymSystemEC_serviceDesc, srv)
}

func _PseudonymSystemEC_GenerateCertificate_EC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PseudonymSystemECServer).GenerateCertificate_EC(&pseudonymSystemECGenerateCertificate_ECServer{stream})
}

type PseudonymSystemEC_GenerateCertificate_ECServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pseudonymSystemECGenerateCertificate_ECServer struct {
	grpc.ServerStream
}

func (x *pseudonymSystemECGenerateCertificate_ECServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pseudonymSystemECGenerateCertificate_ECServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PseudonymSystemEC_GenerateNym_EC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PseudonymSystemECServer).GenerateNym_EC(&pseudonymSystemECGenerateNym_ECServer{stream})
}

type PseudonymSystemEC_GenerateNym_ECServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pseudonymSystemECGenerateNym_ECServer struct {
	grpc.ServerStream
}

func (x *pseudonymSystemECGenerateNym_ECServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pseudonymSystemECGenerateNym_ECServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PseudonymSystemEC_ObtainCredential_EC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PseudonymSystemECServer).ObtainCredential_EC(&pseudonymSystemECObtainCredential_ECServer{stream})
}

type PseudonymSystemEC_ObtainCredential_ECServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pseudonymSystemECObtainCredential_ECServer struct {
	grpc.ServerStream
}

func (x *pseudonymSystemECObtainCredential_ECServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pseudonymSystemECObtainCredential_ECServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PseudonymSystemEC_TransferCredential_EC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PseudonymSystemECServer).TransferCredential_EC(&pseudonymSystemECTransferCredential_ECServer{stream})
}

type PseudonymSystemEC_TransferCredential_ECServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pseudonymSystemECTransferCredential_ECServer struct {
	grpc.ServerStream
}

func (x *pseudonymSystemECTransferCredential_ECServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pseudonymSystemECTransferCredential_ECServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PseudonymSystemEC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PseudonymSystemEC",
	HandlerType: (*PseudonymSystemECServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateCertificate_EC",
			Handler:       _PseudonymSystemEC_GenerateCertificate_EC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GenerateNym_EC",
			Handler:       _PseudonymSystemEC_GenerateNym_EC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ObtainCredential_EC",
			Handler:       _PseudonymSystemEC_ObtainCredential_EC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TransferCredential_EC",
			Handler:       _PseudonymSystemEC_TransferCredential_EC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services.proto",
}

// Client API for PseudonymSystem service

type PseudonymSystemClient interface {
	GenerateCertificate(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_GenerateCertificateClient, error)
	GenerateNym(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_GenerateNymClient, error)
	ObtainCredential(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_ObtainCredentialClient, error)
	TransferCredential(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_TransferCredentialClient, error)
}

type pseudonymSystemClient struct {
	cc *grpc.ClientConn
}

func NewPseudonymSystemClient(cc *grpc.ClientConn) PseudonymSystemClient {
	return &pseudonymSystemClient{cc}
}

func (c *pseudonymSystemClient) GenerateCertificate(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_GenerateCertificateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PseudonymSystem_serviceDesc.Streams[0], c.cc, "/proto.PseudonymSystem/GenerateCertificate", opts...)
	if err != nil {
		return nil, err
	}
	x := &pseudonymSystemGenerateCertificateClient{stream}
	return x, nil
}

type PseudonymSystem_GenerateCertificateClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pseudonymSystemGenerateCertificateClient struct {
	grpc.ClientStream
}

func (x *pseudonymSystemGenerateCertificateClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pseudonymSystemGenerateCertificateClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pseudonymSystemClient) GenerateNym(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_GenerateNymClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PseudonymSystem_serviceDesc.Streams[1], c.cc, "/proto.PseudonymSystem/GenerateNym", opts...)
	if err != nil {
		return nil, err
	}
	x := &pseudonymSystemGenerateNymClient{stream}
	return x, nil
}

type PseudonymSystem_GenerateNymClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pseudonymSystemGenerateNymClient struct {
	grpc.ClientStream
}

func (x *pseudonymSystemGenerateNymClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pseudonymSystemGenerateNymClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pseudonymSystemClient) ObtainCredential(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_ObtainCredentialClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PseudonymSystem_serviceDesc.Streams[2], c.cc, "/proto.PseudonymSystem/ObtainCredential", opts...)
	if err != nil {
		return nil, err
	}
	x := &pseudonymSystemObtainCredentialClient{stream}
	return x, nil
}

type PseudonymSystem_ObtainCredentialClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pseudonymSystemObtainCredentialClient struct {
	grpc.ClientStream
}

func (x *pseudonymSystemObtainCredentialClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pseudonymSystemObtainCredentialClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pseudonymSystemClient) TransferCredential(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_TransferCredentialClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PseudonymSystem_serviceDesc.Streams[3], c.cc, "/proto.PseudonymSystem/TransferCredential", opts...)
	if err != nil {
		return nil, err
	}
	x := &pseudonymSystemTransferCredentialClient{stream}
	return x, nil
}

type PseudonymSystem_TransferCredentialClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pseudonymSystemTransferCredentialClient struct {
	grpc.ClientStream
}

func (x *pseudonymSystemTransferCredentialClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pseudonymSystemTransferCredentialClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PseudonymSystem service

type PseudonymSystemServer interface {
	GenerateCertificate(PseudonymSystem_GenerateCertificateServer) error
	GenerateNym(PseudonymSystem_GenerateNymServer) error
	ObtainCredential(PseudonymSystem_ObtainCredentialServer) error
	TransferCredential(PseudonymSystem_TransferCredentialServer) error
}

func RegisterPseudonymSystemServer(s *grpc.Server, srv PseudonymSystemServer) {
	s.RegisterService(&_PseudonymSystem_serviceDesc, srv)
}

func _PseudonymSystem_GenerateCertificate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PseudonymSystemServer).GenerateCertificate(&pseudonymSystemGenerateCertificateServer{stream})
}

type PseudonymSystem_GenerateCertificateServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pseudonymSystemGenerateCertificateServer struct {
	grpc.ServerStream
}

func (x *pseudonymSystemGenerateCertificateServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pseudonymSystemGenerateCertificateServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PseudonymSystem_GenerateNym_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PseudonymSystemServer).GenerateNym(&pseudonymSystemGenerateNymServer{stream})
}

type PseudonymSystem_GenerateNymServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pseudonymSystemGenerateNymServer struct {
	grpc.ServerStream
}

func (x *pseudonymSystemGenerateNymServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pseudonymSystemGenerateNymServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PseudonymSystem_ObtainCredential_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PseudonymSystemServer).ObtainCredential(&pseudonymSystemObtainCredentialServer{stream})
}

type PseudonymSystem_ObtainCredentialServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pseudonymSystemObtainCredentialServer struct {
	grpc.ServerStream
}

func (x *pseudonymSystemObtainCredentialServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pseudonymSystemObtainCredentialServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PseudonymSystem_TransferCredential_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PseudonymSystemServer).TransferCredential(&pseudonymSystemTransferCredentialServer{stream})
}

type PseudonymSystem_TransferCredentialServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pseudonymSystemTransferCredentialServer struct {
	grpc.ServerStream
}

func (x *pseudonymSystemTransferCredentialServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pseudonymSystemTransferCredentialServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PseudonymSystem_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PseudonymSystem",
	HandlerType: (*PseudonymSystemServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateCertificate",
			Handler:       _PseudonymSystem_GenerateCertificate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GenerateNym",
			Handler:       _PseudonymSystem_GenerateNym_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ObtainCredential",
			Handler:       _PseudonymSystem_ObtainCredential_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TransferCredential",
			Handler:       _PseudonymSystem_TransferCredential_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services.proto",
}

// Client API for Info service

type InfoClient interface {
	GetServiceInfo(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ServiceInfo, error)
}

type infoClient struct {
	cc *grpc.ClientConn
}

func NewInfoClient(cc *grpc.ClientConn) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) GetServiceInfo(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := grpc.Invoke(ctx, "/proto.Info/GetServiceInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Info service

type InfoServer interface {
	GetServiceInfo(context.Context, *google_protobuf.Empty) (*ServiceInfo, error)
}

func RegisterInfoServer(s *grpc.Server, srv InfoServer) {
	s.RegisterService(&_Info_serviceDesc, srv)
}

func _Info_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Info/GetServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetServiceInfo(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Info_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceInfo",
			Handler:    _Info_GetServiceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

func init() { proto1.RegisterFile("services.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0x7c,
	0xb9, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0x30, 0x61, 0x29, 0xe9, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54,
	0x7d, 0x30, 0x2f, 0xa9, 0x34, 0x4d, 0x3f, 0x35, 0xb7, 0xa0, 0xa4, 0x12, 0x22, 0x69, 0xd4, 0xce,
	0xc4, 0x25, 0x18, 0x50, 0x9c, 0x5a, 0x9a, 0x92, 0x9f, 0x57, 0x99, 0x1b, 0x5c, 0x59, 0x5c, 0x92,
	0x9a, 0xeb, 0xea, 0x2c, 0x64, 0xc7, 0x25, 0xe6, 0x9e, 0x9a, 0x97, 0x5a, 0x94, 0x58, 0x92, 0xea,
	0x9c, 0x5a, 0x54, 0x92, 0x99, 0x96, 0x99, 0x0c, 0x64, 0xc6, 0x03, 0x65, 0xf8, 0x20, 0xfa, 0xf4,
	0x7c, 0x21, 0x76, 0x48, 0xa1, 0xf1, 0x95, 0x18, 0x34, 0x18, 0x0d, 0x18, 0x85, 0xcc, 0xb8, 0xf8,
	0x60, 0xfa, 0xfd, 0x2a, 0x73, 0x89, 0xd7, 0x67, 0xcd, 0x25, 0xec, 0x9f, 0x54, 0x92, 0x98, 0x99,
	0xe7, 0x5c, 0x94, 0x9a, 0x92, 0x9a, 0x57, 0x92, 0x99, 0x98, 0x43, 0xbc, 0x66, 0x5b, 0x2e, 0xd1,
	0x90, 0xa2, 0xc4, 0xbc, 0xe2, 0xb4, 0xd4, 0x22, 0x32, 0xb4, 0x1b, 0xfd, 0x64, 0xe4, 0xe2, 0x47,
	0x0b, 0x09, 0x90, 0x7b, 0xb0, 0x84, 0x03, 0x91, 0xee, 0x31, 0xe6, 0xe2, 0x46, 0x0a, 0x04, 0x22,
	0x35, 0x59, 0x70, 0x09, 0xa0, 0x87, 0x00, 0x91, 0x3a, 0xad, 0xb8, 0x84, 0x30, 0xbd, 0x4f, 0xa4,
	0xdf, 0xdd, 0xb8, 0x58, 0x3c, 0xf3, 0xd2, 0xf2, 0x81, 0xf1, 0x0e, 0x8c, 0xb7, 0x92, 0x60, 0x48,
	0xb2, 0x02, 0x8b, 0x88, 0xe9, 0x41, 0x52, 0x8f, 0x1e, 0x2c, 0xf5, 0xe8, 0xb9, 0x82, 0x52, 0x8f,
	0x94, 0x10, 0xd4, 0x1c, 0x24, 0xb5, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0x41, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x20, 0x9b, 0x44, 0x52, 0x9a, 0x02, 0x00, 0x00,
}
