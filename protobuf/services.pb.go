// Code generated by protoc-gen-go.
// source: services.proto
// DO NOT EDIT!

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Protocol service

type ProtocolClient interface {
	Run(ctx context.Context, opts ...grpc.CallOption) (Protocol_RunClient, error)
}

type protocolClient struct {
	cc *grpc.ClientConn
}

func NewProtocolClient(cc *grpc.ClientConn) ProtocolClient {
	return &protocolClient{cc}
}

func (c *protocolClient) Run(ctx context.Context, opts ...grpc.CallOption) (Protocol_RunClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Protocol_serviceDesc.Streams[0], c.cc, "/protobuf.Protocol/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocolRunClient{stream}
	return x, nil
}

type Protocol_RunClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type protocolRunClient struct {
	grpc.ClientStream
}

func (x *protocolRunClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *protocolRunClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Protocol service

type ProtocolServer interface {
	Run(Protocol_RunServer) error
}

func RegisterProtocolServer(s *grpc.Server, srv ProtocolServer) {
	s.RegisterService(&_Protocol_serviceDesc, srv)
}

func _Protocol_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProtocolServer).Run(&protocolRunServer{stream})
}

type Protocol_RunServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type protocolRunServer struct {
	grpc.ServerStream
}

func (x *protocolRunServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *protocolRunServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Protocol_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Protocol",
	HandlerType: (*ProtocolServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _Protocol_Run_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services.proto",
}

// Client API for Protocol_EC service

type Protocol_ECClient interface {
	Run(ctx context.Context, opts ...grpc.CallOption) (Protocol_EC_RunClient, error)
}

type protocol_ECClient struct {
	cc *grpc.ClientConn
}

func NewProtocol_ECClient(cc *grpc.ClientConn) Protocol_ECClient {
	return &protocol_ECClient{cc}
}

func (c *protocol_ECClient) Run(ctx context.Context, opts ...grpc.CallOption) (Protocol_EC_RunClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Protocol_EC_serviceDesc.Streams[0], c.cc, "/protobuf.Protocol_EC/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocol_ECRunClient{stream}
	return x, nil
}

type Protocol_EC_RunClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type protocol_ECRunClient struct {
	grpc.ClientStream
}

func (x *protocol_ECRunClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *protocol_ECRunClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Protocol_EC service

type Protocol_ECServer interface {
	Run(Protocol_EC_RunServer) error
}

func RegisterProtocol_ECServer(s *grpc.Server, srv Protocol_ECServer) {
	s.RegisterService(&_Protocol_EC_serviceDesc, srv)
}

func _Protocol_EC_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Protocol_ECServer).Run(&protocol_ECRunServer{stream})
}

type Protocol_EC_RunServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type protocol_ECRunServer struct {
	grpc.ServerStream
}

func (x *protocol_ECRunServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *protocol_ECRunServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Protocol_EC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Protocol_EC",
	HandlerType: (*Protocol_ECServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _Protocol_EC_Run_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services.proto",
}

// Client API for PseudonymSystemCA service

type PseudonymSystemCAClient interface {
	GenerateCertificate(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystemCA_GenerateCertificateClient, error)
}

type pseudonymSystemCAClient struct {
	cc *grpc.ClientConn
}

func NewPseudonymSystemCAClient(cc *grpc.ClientConn) PseudonymSystemCAClient {
	return &pseudonymSystemCAClient{cc}
}

func (c *pseudonymSystemCAClient) GenerateCertificate(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystemCA_GenerateCertificateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PseudonymSystemCA_serviceDesc.Streams[0], c.cc, "/protobuf.PseudonymSystemCA/GenerateCertificate", opts...)
	if err != nil {
		return nil, err
	}
	x := &pseudonymSystemCAGenerateCertificateClient{stream}
	return x, nil
}

type PseudonymSystemCA_GenerateCertificateClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pseudonymSystemCAGenerateCertificateClient struct {
	grpc.ClientStream
}

func (x *pseudonymSystemCAGenerateCertificateClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pseudonymSystemCAGenerateCertificateClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PseudonymSystemCA service

type PseudonymSystemCAServer interface {
	GenerateCertificate(PseudonymSystemCA_GenerateCertificateServer) error
}

func RegisterPseudonymSystemCAServer(s *grpc.Server, srv PseudonymSystemCAServer) {
	s.RegisterService(&_PseudonymSystemCA_serviceDesc, srv)
}

func _PseudonymSystemCA_GenerateCertificate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PseudonymSystemCAServer).GenerateCertificate(&pseudonymSystemCAGenerateCertificateServer{stream})
}

type PseudonymSystemCA_GenerateCertificateServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pseudonymSystemCAGenerateCertificateServer struct {
	grpc.ServerStream
}

func (x *pseudonymSystemCAGenerateCertificateServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pseudonymSystemCAGenerateCertificateServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PseudonymSystemCA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.PseudonymSystemCA",
	HandlerType: (*PseudonymSystemCAServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateCertificate",
			Handler:       _PseudonymSystemCA_GenerateCertificate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services.proto",
}

// Client API for PseudonymSystemCA_EC service

type PseudonymSystemCA_ECClient interface {
	GenerateCertificate(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystemCA_EC_GenerateCertificateClient, error)
}

type pseudonymSystemCA_ECClient struct {
	cc *grpc.ClientConn
}

func NewPseudonymSystemCA_ECClient(cc *grpc.ClientConn) PseudonymSystemCA_ECClient {
	return &pseudonymSystemCA_ECClient{cc}
}

func (c *pseudonymSystemCA_ECClient) GenerateCertificate(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystemCA_EC_GenerateCertificateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PseudonymSystemCA_EC_serviceDesc.Streams[0], c.cc, "/protobuf.PseudonymSystemCA_EC/GenerateCertificate", opts...)
	if err != nil {
		return nil, err
	}
	x := &pseudonymSystemCA_ECGenerateCertificateClient{stream}
	return x, nil
}

type PseudonymSystemCA_EC_GenerateCertificateClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pseudonymSystemCA_ECGenerateCertificateClient struct {
	grpc.ClientStream
}

func (x *pseudonymSystemCA_ECGenerateCertificateClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pseudonymSystemCA_ECGenerateCertificateClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PseudonymSystemCA_EC service

type PseudonymSystemCA_ECServer interface {
	GenerateCertificate(PseudonymSystemCA_EC_GenerateCertificateServer) error
}

func RegisterPseudonymSystemCA_ECServer(s *grpc.Server, srv PseudonymSystemCA_ECServer) {
	s.RegisterService(&_PseudonymSystemCA_EC_serviceDesc, srv)
}

func _PseudonymSystemCA_EC_GenerateCertificate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PseudonymSystemCA_ECServer).GenerateCertificate(&pseudonymSystemCA_ECGenerateCertificateServer{stream})
}

type PseudonymSystemCA_EC_GenerateCertificateServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pseudonymSystemCA_ECGenerateCertificateServer struct {
	grpc.ServerStream
}

func (x *pseudonymSystemCA_ECGenerateCertificateServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pseudonymSystemCA_ECGenerateCertificateServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PseudonymSystemCA_EC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.PseudonymSystemCA_EC",
	HandlerType: (*PseudonymSystemCA_ECServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateCertificate",
			Handler:       _PseudonymSystemCA_EC_GenerateCertificate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services.proto",
}

// Client API for PseudonymSystem service

type PseudonymSystemClient interface {
	GenerateNym(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_GenerateNymClient, error)
	ObtainCredential(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_ObtainCredentialClient, error)
	TransferCredential(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_TransferCredentialClient, error)
}

type pseudonymSystemClient struct {
	cc *grpc.ClientConn
}

func NewPseudonymSystemClient(cc *grpc.ClientConn) PseudonymSystemClient {
	return &pseudonymSystemClient{cc}
}

func (c *pseudonymSystemClient) GenerateNym(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_GenerateNymClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PseudonymSystem_serviceDesc.Streams[0], c.cc, "/protobuf.PseudonymSystem/GenerateNym", opts...)
	if err != nil {
		return nil, err
	}
	x := &pseudonymSystemGenerateNymClient{stream}
	return x, nil
}

type PseudonymSystem_GenerateNymClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pseudonymSystemGenerateNymClient struct {
	grpc.ClientStream
}

func (x *pseudonymSystemGenerateNymClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pseudonymSystemGenerateNymClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pseudonymSystemClient) ObtainCredential(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_ObtainCredentialClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PseudonymSystem_serviceDesc.Streams[1], c.cc, "/protobuf.PseudonymSystem/ObtainCredential", opts...)
	if err != nil {
		return nil, err
	}
	x := &pseudonymSystemObtainCredentialClient{stream}
	return x, nil
}

type PseudonymSystem_ObtainCredentialClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pseudonymSystemObtainCredentialClient struct {
	grpc.ClientStream
}

func (x *pseudonymSystemObtainCredentialClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pseudonymSystemObtainCredentialClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pseudonymSystemClient) TransferCredential(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_TransferCredentialClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PseudonymSystem_serviceDesc.Streams[2], c.cc, "/protobuf.PseudonymSystem/TransferCredential", opts...)
	if err != nil {
		return nil, err
	}
	x := &pseudonymSystemTransferCredentialClient{stream}
	return x, nil
}

type PseudonymSystem_TransferCredentialClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pseudonymSystemTransferCredentialClient struct {
	grpc.ClientStream
}

func (x *pseudonymSystemTransferCredentialClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pseudonymSystemTransferCredentialClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PseudonymSystem service

type PseudonymSystemServer interface {
	GenerateNym(PseudonymSystem_GenerateNymServer) error
	ObtainCredential(PseudonymSystem_ObtainCredentialServer) error
	TransferCredential(PseudonymSystem_TransferCredentialServer) error
}

func RegisterPseudonymSystemServer(s *grpc.Server, srv PseudonymSystemServer) {
	s.RegisterService(&_PseudonymSystem_serviceDesc, srv)
}

func _PseudonymSystem_GenerateNym_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PseudonymSystemServer).GenerateNym(&pseudonymSystemGenerateNymServer{stream})
}

type PseudonymSystem_GenerateNymServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pseudonymSystemGenerateNymServer struct {
	grpc.ServerStream
}

func (x *pseudonymSystemGenerateNymServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pseudonymSystemGenerateNymServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PseudonymSystem_ObtainCredential_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PseudonymSystemServer).ObtainCredential(&pseudonymSystemObtainCredentialServer{stream})
}

type PseudonymSystem_ObtainCredentialServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pseudonymSystemObtainCredentialServer struct {
	grpc.ServerStream
}

func (x *pseudonymSystemObtainCredentialServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pseudonymSystemObtainCredentialServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PseudonymSystem_TransferCredential_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PseudonymSystemServer).TransferCredential(&pseudonymSystemTransferCredentialServer{stream})
}

type PseudonymSystem_TransferCredentialServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pseudonymSystemTransferCredentialServer struct {
	grpc.ServerStream
}

func (x *pseudonymSystemTransferCredentialServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pseudonymSystemTransferCredentialServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PseudonymSystem_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.PseudonymSystem",
	HandlerType: (*PseudonymSystemServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateNym",
			Handler:       _PseudonymSystem_GenerateNym_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ObtainCredential",
			Handler:       _PseudonymSystem_ObtainCredential_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TransferCredential",
			Handler:       _PseudonymSystem_TransferCredential_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services.proto",
}

// Client API for PseudonymSystem_EC service

type PseudonymSystem_ECClient interface {
	GenerateNym(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_EC_GenerateNymClient, error)
	ObtainCredential(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_EC_ObtainCredentialClient, error)
	TransferCredential(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_EC_TransferCredentialClient, error)
}

type pseudonymSystem_ECClient struct {
	cc *grpc.ClientConn
}

func NewPseudonymSystem_ECClient(cc *grpc.ClientConn) PseudonymSystem_ECClient {
	return &pseudonymSystem_ECClient{cc}
}

func (c *pseudonymSystem_ECClient) GenerateNym(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_EC_GenerateNymClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PseudonymSystem_EC_serviceDesc.Streams[0], c.cc, "/protobuf.PseudonymSystem_EC/GenerateNym", opts...)
	if err != nil {
		return nil, err
	}
	x := &pseudonymSystem_ECGenerateNymClient{stream}
	return x, nil
}

type PseudonymSystem_EC_GenerateNymClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pseudonymSystem_ECGenerateNymClient struct {
	grpc.ClientStream
}

func (x *pseudonymSystem_ECGenerateNymClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pseudonymSystem_ECGenerateNymClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pseudonymSystem_ECClient) ObtainCredential(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_EC_ObtainCredentialClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PseudonymSystem_EC_serviceDesc.Streams[1], c.cc, "/protobuf.PseudonymSystem_EC/ObtainCredential", opts...)
	if err != nil {
		return nil, err
	}
	x := &pseudonymSystem_ECObtainCredentialClient{stream}
	return x, nil
}

type PseudonymSystem_EC_ObtainCredentialClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pseudonymSystem_ECObtainCredentialClient struct {
	grpc.ClientStream
}

func (x *pseudonymSystem_ECObtainCredentialClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pseudonymSystem_ECObtainCredentialClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pseudonymSystem_ECClient) TransferCredential(ctx context.Context, opts ...grpc.CallOption) (PseudonymSystem_EC_TransferCredentialClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PseudonymSystem_EC_serviceDesc.Streams[2], c.cc, "/protobuf.PseudonymSystem_EC/TransferCredential", opts...)
	if err != nil {
		return nil, err
	}
	x := &pseudonymSystem_ECTransferCredentialClient{stream}
	return x, nil
}

type PseudonymSystem_EC_TransferCredentialClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pseudonymSystem_ECTransferCredentialClient struct {
	grpc.ClientStream
}

func (x *pseudonymSystem_ECTransferCredentialClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pseudonymSystem_ECTransferCredentialClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PseudonymSystem_EC service

type PseudonymSystem_ECServer interface {
	GenerateNym(PseudonymSystem_EC_GenerateNymServer) error
	ObtainCredential(PseudonymSystem_EC_ObtainCredentialServer) error
	TransferCredential(PseudonymSystem_EC_TransferCredentialServer) error
}

func RegisterPseudonymSystem_ECServer(s *grpc.Server, srv PseudonymSystem_ECServer) {
	s.RegisterService(&_PseudonymSystem_EC_serviceDesc, srv)
}

func _PseudonymSystem_EC_GenerateNym_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PseudonymSystem_ECServer).GenerateNym(&pseudonymSystem_ECGenerateNymServer{stream})
}

type PseudonymSystem_EC_GenerateNymServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pseudonymSystem_ECGenerateNymServer struct {
	grpc.ServerStream
}

func (x *pseudonymSystem_ECGenerateNymServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pseudonymSystem_ECGenerateNymServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PseudonymSystem_EC_ObtainCredential_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PseudonymSystem_ECServer).ObtainCredential(&pseudonymSystem_ECObtainCredentialServer{stream})
}

type PseudonymSystem_EC_ObtainCredentialServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pseudonymSystem_ECObtainCredentialServer struct {
	grpc.ServerStream
}

func (x *pseudonymSystem_ECObtainCredentialServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pseudonymSystem_ECObtainCredentialServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PseudonymSystem_EC_TransferCredential_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PseudonymSystem_ECServer).TransferCredential(&pseudonymSystem_ECTransferCredentialServer{stream})
}

type PseudonymSystem_EC_TransferCredentialServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pseudonymSystem_ECTransferCredentialServer struct {
	grpc.ServerStream
}

func (x *pseudonymSystem_ECTransferCredentialServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pseudonymSystem_ECTransferCredentialServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PseudonymSystem_EC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.PseudonymSystem_EC",
	HandlerType: (*PseudonymSystem_ECServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateNym",
			Handler:       _PseudonymSystem_EC_GenerateNym_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ObtainCredential",
			Handler:       _PseudonymSystem_EC_ObtainCredential_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TransferCredential",
			Handler:       _PseudonymSystem_EC_TransferCredential_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services.proto",
}

// Client API for Info service

type InfoClient interface {
	GetServiceInfo(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*ServiceInfo, error)
}

type infoClient struct {
	cc *grpc.ClientConn
}

func NewInfoClient(cc *grpc.ClientConn) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) GetServiceInfo(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := grpc.Invoke(ctx, "/protobuf.Info/GetServiceInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Info service

type InfoServer interface {
	GetServiceInfo(context.Context, *EmptyMsg) (*ServiceInfo, error)
}

func RegisterInfoServer(s *grpc.Server, srv InfoServer) {
	s.RegisterService(&_Info_serviceDesc, srv)
}

func _Info_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Info/GetServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetServiceInfo(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Info_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceInfo",
			Handler:    _Info_GetServiceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

func init() { proto.RegisterFile("services.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0x49, 0xa5,
	0x69, 0x52, 0x7c, 0xb9, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0x30, 0x19, 0x23, 0x5b, 0x2e, 0x8e, 0x00,
	0x10, 0x23, 0x39, 0x3f, 0x47, 0xc8, 0x90, 0x8b, 0x39, 0xa8, 0x34, 0x4f, 0x48, 0x50, 0x0f, 0xa6,
	0x5a, 0xcf, 0x17, 0xa2, 0x58, 0x0a, 0x53, 0x48, 0x89, 0x41, 0x83, 0xd1, 0x80, 0xd1, 0xc8, 0x81,
	0x8b, 0x1b, 0xa6, 0x3d, 0xde, 0xd5, 0x99, 0x1c, 0x13, 0xc2, 0xb8, 0x04, 0x03, 0x8a, 0x53, 0x4b,
	0x53, 0xf2, 0xf3, 0x2a, 0x73, 0x83, 0x2b, 0x8b, 0x4b, 0x52, 0x73, 0x9d, 0x1d, 0x85, 0x1c, 0xb9,
	0x84, 0xdd, 0x53, 0xf3, 0x52, 0x8b, 0x12, 0x4b, 0x52, 0x9d, 0x53, 0x8b, 0x4a, 0x32, 0xd3, 0x32,
	0x93, 0x81, 0x4c, 0x92, 0xcc, 0x8d, 0xe4, 0x12, 0xc1, 0x30, 0x17, 0xe4, 0x44, 0x2a, 0x18, 0x7d,
	0x8e, 0x91, 0x8b, 0x1f, 0xcd, 0x6c, 0x21, 0x4b, 0x2e, 0x6e, 0x98, 0xb1, 0x7e, 0x95, 0xb9, 0xa4,
	0x18, 0x27, 0x64, 0xc7, 0x25, 0xe0, 0x9f, 0x54, 0x92, 0x98, 0x99, 0xe7, 0x5c, 0x94, 0x9a, 0x92,
	0x9a, 0x57, 0x92, 0x99, 0x98, 0x43, 0x92, 0x7e, 0x07, 0x2e, 0xa1, 0x90, 0xa2, 0xc4, 0xbc, 0xe2,
	0xb4, 0xd4, 0x22, 0xf2, 0x4c, 0x30, 0xba, 0xc8, 0xc8, 0x25, 0x84, 0xe6, 0x21, 0x50, 0x50, 0x0d,
	0x69, 0x3f, 0xb9, 0x72, 0xb1, 0x78, 0xe6, 0xa5, 0xe5, 0x0b, 0xd9, 0x72, 0xf1, 0xb9, 0xa7, 0x96,
	0x04, 0x43, 0xf2, 0x03, 0x58, 0x44, 0x08, 0xa1, 0xc5, 0x35, 0xb7, 0xa0, 0xa4, 0xd2, 0xb7, 0x38,
	0x5d, 0x4a, 0x14, 0x21, 0x86, 0xa4, 0x54, 0x89, 0x21, 0x89, 0x0d, 0x2c, 0x6e, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0xa1, 0x2c, 0xed, 0xde, 0x52, 0x03, 0x00, 0x00,
}
