// Code generated by protoc-gen-go.
// source: ecpseudsys/pb/ecpseudsys.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	ecpseudsys/pb/ecpseudsys.proto

It has these top-level messages:
	CARequest
	CAResponse
	ProofRandData
	Cert
	ECGroupElement
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CARequest struct {
	// Types that are valid to be assigned to Type:
	//	*CARequest_ProofRandData
	//	*CARequest_ProofData
	Type isCARequest_Type `protobuf_oneof:"type"`
}

func (m *CARequest) Reset()                    { *m = CARequest{} }
func (m *CARequest) String() string            { return proto.CompactTextString(m) }
func (*CARequest) ProtoMessage()               {}
func (*CARequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isCARequest_Type interface {
	isCARequest_Type()
}

type CARequest_ProofRandData struct {
	ProofRandData *ProofRandData `protobuf:"bytes,1,opt,name=proofRandData,oneof"`
}
type CARequest_ProofData struct {
	ProofData []byte `protobuf:"bytes,2,opt,name=proofData,proto3,oneof"`
}

func (*CARequest_ProofRandData) isCARequest_Type() {}
func (*CARequest_ProofData) isCARequest_Type()     {}

func (m *CARequest) GetType() isCARequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CARequest) GetProofRandData() *ProofRandData {
	if x, ok := m.GetType().(*CARequest_ProofRandData); ok {
		return x.ProofRandData
	}
	return nil
}

func (m *CARequest) GetProofData() []byte {
	if x, ok := m.GetType().(*CARequest_ProofData); ok {
		return x.ProofData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CARequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CARequest_OneofMarshaler, _CARequest_OneofUnmarshaler, _CARequest_OneofSizer, []interface{}{
		(*CARequest_ProofRandData)(nil),
		(*CARequest_ProofData)(nil),
	}
}

func _CARequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CARequest)
	// type
	switch x := m.Type.(type) {
	case *CARequest_ProofRandData:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProofRandData); err != nil {
			return err
		}
	case *CARequest_ProofData:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.ProofData)
	case nil:
	default:
		return fmt.Errorf("CARequest.Type has unexpected type %T", x)
	}
	return nil
}

func _CARequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CARequest)
	switch tag {
	case 1: // type.proofRandData
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProofRandData)
		err := b.DecodeMessage(msg)
		m.Type = &CARequest_ProofRandData{msg}
		return true, err
	case 2: // type.proofData
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Type = &CARequest_ProofData{x}
		return true, err
	default:
		return false, nil
	}
}

func _CARequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CARequest)
	// type
	switch x := m.Type.(type) {
	case *CARequest_ProofRandData:
		s := proto.Size(x.ProofRandData)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CARequest_ProofData:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ProofData)))
		n += len(x.ProofData)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CAResponse struct {
	// Types that are valid to be assigned to Type:
	//	*CAResponse_Challenge
	//	*CAResponse_Cert
	Type isCAResponse_Type `protobuf_oneof:"type"`
}

func (m *CAResponse) Reset()                    { *m = CAResponse{} }
func (m *CAResponse) String() string            { return proto.CompactTextString(m) }
func (*CAResponse) ProtoMessage()               {}
func (*CAResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isCAResponse_Type interface {
	isCAResponse_Type()
}

type CAResponse_Challenge struct {
	Challenge []byte `protobuf:"bytes,1,opt,name=challenge,proto3,oneof"`
}
type CAResponse_Cert struct {
	Cert *Cert `protobuf:"bytes,2,opt,name=cert,oneof"`
}

func (*CAResponse_Challenge) isCAResponse_Type() {}
func (*CAResponse_Cert) isCAResponse_Type()      {}

func (m *CAResponse) GetType() isCAResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CAResponse) GetChallenge() []byte {
	if x, ok := m.GetType().(*CAResponse_Challenge); ok {
		return x.Challenge
	}
	return nil
}

func (m *CAResponse) GetCert() *Cert {
	if x, ok := m.GetType().(*CAResponse_Cert); ok {
		return x.Cert
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CAResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CAResponse_OneofMarshaler, _CAResponse_OneofUnmarshaler, _CAResponse_OneofSizer, []interface{}{
		(*CAResponse_Challenge)(nil),
		(*CAResponse_Cert)(nil),
	}
}

func _CAResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CAResponse)
	// type
	switch x := m.Type.(type) {
	case *CAResponse_Challenge:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Challenge)
	case *CAResponse_Cert:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cert); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CAResponse.Type has unexpected type %T", x)
	}
	return nil
}

func _CAResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CAResponse)
	switch tag {
	case 1: // type.challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Type = &CAResponse_Challenge{x}
		return true, err
	case 2: // type.cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cert)
		err := b.DecodeMessage(msg)
		m.Type = &CAResponse_Cert{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CAResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CAResponse)
	// type
	switch x := m.Type.(type) {
	case *CAResponse_Challenge:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Challenge)))
		n += len(x.Challenge)
	case *CAResponse_Cert:
		s := proto.Size(x.Cert)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ProofRandData struct {
	X *ECGroupElement `protobuf:"bytes,1,opt,name=X" json:"X,omitempty"`
	A *ECGroupElement `protobuf:"bytes,2,opt,name=A" json:"A,omitempty"`
	B *ECGroupElement `protobuf:"bytes,3,opt,name=B" json:"B,omitempty"`
}

func (m *ProofRandData) Reset()                    { *m = ProofRandData{} }
func (m *ProofRandData) String() string            { return proto.CompactTextString(m) }
func (*ProofRandData) ProtoMessage()               {}
func (*ProofRandData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProofRandData) GetX() *ECGroupElement {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *ProofRandData) GetA() *ECGroupElement {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *ProofRandData) GetB() *ECGroupElement {
	if m != nil {
		return m.B
	}
	return nil
}

type Cert struct {
	BlindedA *ECGroupElement `protobuf:"bytes,1,opt,name=BlindedA" json:"BlindedA,omitempty"`
	BlindedB *ECGroupElement `protobuf:"bytes,2,opt,name=BlindedB" json:"BlindedB,omitempty"`
	R        []byte          `protobuf:"bytes,3,opt,name=R,proto3" json:"R,omitempty"`
	S        []byte          `protobuf:"bytes,4,opt,name=S,proto3" json:"S,omitempty"`
}

func (m *Cert) Reset()                    { *m = Cert{} }
func (m *Cert) String() string            { return proto.CompactTextString(m) }
func (*Cert) ProtoMessage()               {}
func (*Cert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Cert) GetBlindedA() *ECGroupElement {
	if m != nil {
		return m.BlindedA
	}
	return nil
}

func (m *Cert) GetBlindedB() *ECGroupElement {
	if m != nil {
		return m.BlindedB
	}
	return nil
}

func (m *Cert) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *Cert) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type ECGroupElement struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	Y []byte `protobuf:"bytes,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (m *ECGroupElement) Reset()                    { *m = ECGroupElement{} }
func (m *ECGroupElement) String() string            { return proto.CompactTextString(m) }
func (*ECGroupElement) ProtoMessage()               {}
func (*ECGroupElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ECGroupElement) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *ECGroupElement) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

func init() {
	proto.RegisterType((*CARequest)(nil), "pb.CARequest")
	proto.RegisterType((*CAResponse)(nil), "pb.CAResponse")
	proto.RegisterType((*ProofRandData)(nil), "pb.ProofRandData")
	proto.RegisterType((*Cert)(nil), "pb.Cert")
	proto.RegisterType((*ECGroupElement)(nil), "pb.ECGroupElement")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CA service

type CAClient interface {
	GenerateCertificate(ctx context.Context, opts ...grpc.CallOption) (CA_GenerateCertificateClient, error)
}

type cAClient struct {
	cc *grpc.ClientConn
}

func NewCAClient(cc *grpc.ClientConn) CAClient {
	return &cAClient{cc}
}

func (c *cAClient) GenerateCertificate(ctx context.Context, opts ...grpc.CallOption) (CA_GenerateCertificateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CA_serviceDesc.Streams[0], c.cc, "/pb.CA/GenerateCertificate", opts...)
	if err != nil {
		return nil, err
	}
	x := &cAGenerateCertificateClient{stream}
	return x, nil
}

type CA_GenerateCertificateClient interface {
	Send(*CARequest) error
	Recv() (*CAResponse, error)
	grpc.ClientStream
}

type cAGenerateCertificateClient struct {
	grpc.ClientStream
}

func (x *cAGenerateCertificateClient) Send(m *CARequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cAGenerateCertificateClient) Recv() (*CAResponse, error) {
	m := new(CAResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CA service

type CAServer interface {
	GenerateCertificate(CA_GenerateCertificateServer) error
}

func RegisterCAServer(s *grpc.Server, srv CAServer) {
	s.RegisterService(&_CA_serviceDesc, srv)
}

func _CA_GenerateCertificate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CAServer).GenerateCertificate(&cAGenerateCertificateServer{stream})
}

type CA_GenerateCertificateServer interface {
	Send(*CAResponse) error
	Recv() (*CARequest, error)
	grpc.ServerStream
}

type cAGenerateCertificateServer struct {
	grpc.ServerStream
}

func (x *cAGenerateCertificateServer) Send(m *CAResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cAGenerateCertificateServer) Recv() (*CARequest, error) {
	m := new(CARequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CA",
	HandlerType: (*CAServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateCertificate",
			Handler:       _CA_GenerateCertificate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ecpseudsys/pb/ecpseudsys.proto",
}

func init() { proto.RegisterFile("ecpseudsys/pb/ecpseudsys.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x92, 0x3f, 0x6f, 0xc2, 0x30,
	0x10, 0xc5, 0x31, 0x8d, 0x10, 0x1c, 0x01, 0xa9, 0xee, 0x82, 0x3a, 0x20, 0x94, 0x89, 0xa1, 0x0a,
	0x15, 0x9d, 0xda, 0xa9, 0x49, 0x8a, 0xe8, 0x58, 0x99, 0x0e, 0x30, 0xe6, 0xcf, 0xd1, 0x22, 0xa5,
	0x8e, 0x9b, 0x38, 0x03, 0x6b, 0x3f, 0x79, 0x6d, 0x07, 0x02, 0x91, 0x5a, 0xb6, 0xbc, 0xbb, 0xdf,
	0xbb, 0x7b, 0x8e, 0x0d, 0x63, 0x8c, 0x45, 0x81, 0x65, 0x52, 0xec, 0x8b, 0x99, 0x88, 0x66, 0x27,
	0xe5, 0x8a, 0x3c, 0x93, 0x19, 0x6d, 0x8b, 0xc8, 0xe1, 0xd0, 0x0b, 0x3c, 0x86, 0xdf, 0x25, 0x16,
	0x92, 0x3e, 0xc2, 0x40, 0x75, 0xb2, 0x2d, 0x0b, 0x79, 0xf2, 0x12, 0xca, 0x70, 0x44, 0x26, 0x64,
	0xda, 0x9f, 0x5f, 0xbb, 0x22, 0x72, 0xdf, 0xce, 0x1b, 0xaf, 0x2d, 0xd6, 0x24, 0xe9, 0x18, 0x7a,
	0xa6, 0x60, 0x6c, 0x6d, 0x65, 0xb3, 0x15, 0x73, 0x2a, 0xf9, 0x1d, 0xb0, 0xe4, 0x5e, 0xa0, 0xf3,
	0x0e, 0xa0, 0xf7, 0x15, 0x22, 0xe3, 0x05, 0x6a, 0x57, 0xfc, 0x19, 0xa6, 0x29, 0xf2, 0x0f, 0x34,
	0xcb, 0x8c, 0xab, 0x2e, 0xa9, 0xbe, 0x15, 0x63, 0x2e, 0xcd, 0xc0, 0xfe, 0xbc, 0xab, 0x73, 0x04,
	0x4a, 0x2b, 0xc8, 0xd4, 0xeb, 0xa9, 0x25, 0x0c, 0x1a, 0xf9, 0xe8, 0x04, 0xc8, 0xfa, 0x90, 0x9e,
	0x6a, 0xd7, 0x22, 0x58, 0xe6, 0x59, 0x29, 0x16, 0x29, 0x7e, 0x21, 0x97, 0x8c, 0xac, 0x35, 0xe1,
	0x1d, 0xe6, 0xfe, 0x49, 0x78, 0x9a, 0xf0, 0x47, 0x57, 0xff, 0x13, 0xbe, 0xf3, 0x43, 0xc0, 0xd2,
	0x79, 0xa8, 0x0b, 0x5d, 0x3f, 0xdd, 0xf1, 0x04, 0x13, 0xef, 0xc2, 0xd6, 0x9a, 0x39, 0xe3, 0xfd,
	0x0b, 0x19, 0x6a, 0x86, 0xda, 0x40, 0x98, 0x89, 0x62, 0x33, 0xc2, 0xb4, 0x5a, 0x8d, 0xac, 0x4a,
	0xad, 0x9c, 0x3b, 0x18, 0x36, 0x7d, 0xba, 0x5f, 0x1d, 0xde, 0xd6, 0x07, 0x55, 0x6a, 0x53, 0xdd,
	0x08, 0x23, 0x9b, 0xf9, 0x33, 0xb4, 0x03, 0x8f, 0x3e, 0xc1, 0xcd, 0x12, 0x39, 0xe6, 0xa1, 0x44,
	0x9d, 0x7f, 0xb7, 0xdd, 0xc5, 0xea, 0x93, 0x0e, 0xcc, 0x0f, 0x3e, 0x3e, 0x87, 0xdb, 0xe1, 0x51,
	0x56, 0xb7, 0xe5, 0xb4, 0xa6, 0xe4, 0x9e, 0x44, 0x1d, 0xf3, 0x78, 0x1e, 0x7e, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x2f, 0xe6, 0x23, 0x4b, 0x5e, 0x02, 0x00, 0x00,
}
